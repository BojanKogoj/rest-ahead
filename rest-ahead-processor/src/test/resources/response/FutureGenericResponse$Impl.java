package com.lablizards.restahead.demo;

import com.lablizards.restahead.client.RestClient;
import com.lablizards.restahead.client.requests.DeleteRequest;
import com.lablizards.restahead.conversion.Converter;
import com.lablizards.restahead.conversion.GenericReference;
import com.lablizards.restahead.exceptions.RequestFailedException;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.Future;
import javax.annotation.processing.Generated;

@Generated("Generated by RestAhead")
public final class FutureGenericResponse$Impl implements FutureGenericResponse {
    private final RestClient client;

    private final Converter converter;

    public FutureGenericResponse$Impl(RestClient client, Converter converter) {
        this.client = client;
        this.converter = converter;
    }

    @Override
    public final Future<Map<String, Object>> delete() {
        var httpRequest = new DeleteRequest("/delete");
        var response = client.execute(httpRequest);
        CompletableFuture<Map<String, Object>> convertedResponse = response.thenApply(r -> {
            if (r.status() < 200 || r.status() >= 300) {
                throw new RequestFailedException(r.status(), r.body());
            }
            try {
                var conversionTypeHolder = new GenericReference<Map<String, Object>>(){};
                return converter.deserialize(r, conversionTypeHolder.getType());
            } catch (IOException exception) {
                throw new CompletionException(exception);
            }
        } );
        return convertedResponse;
    }
}